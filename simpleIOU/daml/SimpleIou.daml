module SimpleIou where

import Daml.Script
import DA.Text as T
import DA.Time

data Cash = Cash with
  currency: Text
  amount: Decimal
    deriving(Eq, Show)

-- | A simple IOU contract.
template SimpleIou
  with
    owner: Party    --  | The owner of the IOU.
    issuer: Party   --  | The issuer of the IOU.
    cash: Cash
  where
    signatory issuer, owner
    observer owner

    --  | Template preconditions
    --  | Restriction on data that can be stored in this template
    --  | This is implemented via the `ensure` keyword just like `require` in solidity
    --  | Example: Only positive values are allowed
    ensure cash.amount > 0.0
        && T.length cash.currency == 3
        && T.isUpper cash.currency
    --  | Restriction on IOU ends

    -- | Transfer the IOU to a new owner.
    choice Transfer : ContractId SimpleIou
      with
        newOwner: Party 
      controller owner
      do 
        --  | AssertMsg with custom error message just like `require` in solidity
        --  | New ownership cannot be self
        assertMsg "new owner cannot be equal to owner." (owner /= newOwner)
        create this with 
          owner = newOwner 

-- test_iou = script do
--   issuer <- allocateParty "Issuer"
--   holderA <- allocateParty "HolderA"
--   holderB <- allocateParty "HolderB"

--   let
--     cash = Cash with
--       currency = "USD"
--       amount = 100000000.00

--   --  | create contract
--   --  | issues USD to issuer
--   iouContract <- submit issuer do 
--     createCmd SimpleIou with
--       owner = issuer
--       issuer = issuer
--       cash = cash

--   -- | current owner (issuer) excerises choice to transfer to holderA
--   newIouContract <- submit issuer do
--     exerciseCmd iouContract Transfer with
--       newOwner = holderA

--   -- | current owner (holderA) excerises choice to transfer to holderB
--   submit holderA do
--     exerciseCmd newIouContract Transfer with
--       newOwner = holderB

-- test_restrictions = script do
--   issuer <- allocateParty "Issuer"
--   holderA <- allocateParty "HolderA"
--   holderB <- allocateParty "HolderB"

--   let
--     wrongCash = Cash with
--       currency = "usd"  --  | lower case currency: expected to fail
--       amount = 0.0      --  | zero amount: expected to fail

--     cash = Cash with
--       currency = "USD"
--       amount = 100000000.00

--   --  | Test restriction on cash
--   submitMustFail issuer do
--     createCmd SimpleIou with  
--       owner = issuer
--       issuer = issuer
--       cash = wrongCash

--   --  | Test restriction on new ownership
--   --  | 1.  Create the contract
--   iouContract <- submit issuer do 
--     createCmd SimpleIou with
--       owner = issuer
--       issuer = issuer
--       cash = cash
  
--   --  | 2. Try to transfer to self: expected to fail
--   submitMustFail issuer do
--     exerciseCmd iouContract Transfer with
--       newOwner = issuer

-- simple_iou_test = script do
--   alice <- allocateParty "Alice"
--   bob <- allocateParty "Bob"

--   let
--     cash = Cash with
--       currency = "USD"
--       amount = 100000000.00

--   --  | Alice and Bob enter into a trade
--   --  | Alice transfers the payment as a simple IOU
--   iou <- submit alice do
--     createCmd SimpleIou with
--       issuer = alice
--       owner = bob
--       cash = cash

--   passTime (days 1)
--   --  | Bob delivers the goods

--   passTime (minutes 10)
--   --  | Alice just deletes the payment

--   submit alice do
--     archiveCmd iou
--   pure ()

iou_test = script do
  alice <- allocateParty "Alice"
  bob <- allocateParty "Bob"

  let
    cash = Cash with
      currency = "USD"
      amount = 100000000.00

  --  | Alice and Bob enter into a trade
  --  | Alice wants to give Bob an Iou, but she can't without Bob's authority
  iou <- submitMustFail alice do
    createCmd SimpleIou with
      issuer = alice
      owner = bob
      cash = cash

  --  | Alice and Bob enter into a trade
  --  | Alice can issue herself an Iou
  iou <- submit alice do
    createCmd SimpleIou with
      issuer = alice
      owner = alice
      cash = cash

  --  | However, she can't transfer it to Bob
  submitMustFail alice do
    exerciseCmd iou Transfer with
      newOwner = bob
  
  pure ()

