module Types where

import Daml.Script
import DA.Time
import DA.Date
import DA.Tuple

--  Records
--  Records are like named tuples with named fields
--  Declared using `data T = C with`
--  where `T` is the type name
--  where `C` is the data constructor
--  In good practice, its a good idea to always use the same name for type and data constructor
--  similar to struct in solidity

data MyRecord = MyRecord with
    text    :   Text
    int     :   Int 
    dec     :   Decimal
    list    :   [Text]

--  Fields of smae type can be declared in one line
data Coordinate = Coordinate with
    x, y, z : Decimal


record_test =  script do

    let 
        my_record = MyRecord with
            text = "Test"
            int = 12
            dec = 3.142
            list = ["one", "two", "three"]

        
        my_cord = Coordinate with 
            x = 12.6
            y = 45.9
            z = 78.0

    assert (my_record.text == "Test")
    assert (my_record.int == 12)
    assert (my_record.dec == 3.142)
    

native_test = script do

    alice <- allocateParty "Alice"
    bob <- allocateParty "Bob"

    let
        _int = 255   --  int stores 64bits signed integers
        _dec = 0.001 : Decimal 
        _text = "Alice"
        _bool = False
        _date = date 2025 Feb 13
        _time = time _date 00 00 00
        _rel_time = hours 24

    assert (alice /= bob)
    assert (_int == 255)
    assert (1000.0 * _dec == 1.0)
    assert (_text == "Alice")
    assert (not _bool)
    assert (addDays _date 1 == date 2025 Feb 14)
    assert (addRelTime _time _rel_time == time (addDays _date 1) 00 00 00)


tuple_test = script do 
    let
        my_key_value = ("Key", 1)
        my_coordinate = (1.0: Decimal, 2.0: Decimal, 3.0: Decimal)

    assert (fst my_key_value == "Key")
    assert (snd my_key_value == 1)

    assert (my_key_value._1 == "Key")
    assert (my_key_value._2 == 1)

    assert (my_coordinate == (fst3 my_coordinate, snd3 my_coordinate, thd3 my_coordinate))
    assert (my_coordinate == (my_coordinate._1, my_coordinate._2, my_coordinate._3))

